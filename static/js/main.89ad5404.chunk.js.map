{"version":3,"sources":["AppContext.js","Components/StockTable.js","Components/GraphInteractive.js","Services/statistics.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","Component","renderData","this","props","companies","filter","c","get","sortBy","i","numRows","size","bodyContextMenuRenderer","a","openLink","target","cols","name","cellRenderer","rowIndex","columnIndex","getIn","toFixed","Math","round","window","open","Sample","startDrag","event","index","preventDefault","mousemove","cursorPoint","svg","createSVGPoint","x","clientX","y","clientY","matrixTransform","getScreenCTM","inverse","setState","points","state","map","p","max","min","document","addEventListener","mouseup","removeEventListener","historic","projection","random","maxValue","flat","yScaleFactor","zeroLevel","groups","length","groupWidth","historicBars","concat","historicGroup","historicGroupIndex","historicBar","historicBarIndex","width","height","abs","fill","console","log","viewBox","ref","bar","key","x1","y1","x2","y2","stroke","strokeWidth","point","transform","onMouseDown","e","contextType","earningsEstimate","earningsLs","netBrowing","projectionTime","intrest","biasEnd","slope","dividendEstimate","company","type","companyJs","toJS","avgDividendRatio","earnings","dividendRatio","estimationSeries","undefined","NaN","typeLs","values","N","mt","reduce","sum","item","n","mx","sstt","ssxx","sstx","cov","biasStart","std","sqrt","fitt","leastSquarceEstimate","slice","estimate","Routes","selected","estimateType","minimumFittDynamic","minimumFitt","companiesExternal","fromJS","companiesInternal","axios","then","response","companiesAsObject","data","acc","cur","ShortName","mergedCompanies","set","mergeDeep","toList","class","value","onChange","currentTarget","stepSize","labelStepSize","onRelease","labelRenderer","val","path","exact","render","StockTable","GraphInteractive","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89ad5404.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const AppContext = React.createContext();","import React from 'react';\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { AnchorButton } from \"@blueprintjs/core\";\r\nimport { AppContext } from '../AppContext';\r\n \r\nclass Component extends React.Component {\r\n\r\n  // static contextType = AppContext\r\n\r\n  render() {\r\n    // console.log('table state', this.state, this.props, this.context)\r\n\r\n    const { companies } = this.props;\r\n\r\n    var renderData = companies\r\n      .filter(c => c.get('estimate'))\r\n      .sortBy(c => -c.get('estimate'))\r\n      // .filter((c, i) => c.get('yield') > 0)\r\n      .filter((c, i) => i < 20)\r\n      // .filter((c, i) => c.get('Name') === 'EVRY')\r\n\r\n    // console.log('companies', renderData.toJS())\r\n\r\n    // return (\r\n    //   <table class=\"bp3-html-table .modifier\">\r\n    //     <thead>\r\n    //       <tr>\r\n    //         <th>Name</th>\r\n    //         <th>Estimate</th>\r\n    //         <th>Yield</th>\r\n    //         <th>P/E</th>\r\n    //         <th>Avg Dividend Ratio</th>\r\n    //         <th>Model fitt</th>\r\n    //         <th>Momentum 90</th>\r\n    //       </tr>\r\n    //     </thead>\r\n    //     <tbody>\r\n    //       {renderData.map(company => \r\n    //         <tr>\r\n    //           <td>{company.getIn(['Name'])}</td>\r\n    //           <td>{(100*company.getIn(['estimate'])).toFixed(2) + '%'}</td>\r\n    //           <td>{(100*company.getIn(['yield'])).toFixed(1) + '%'}</td>\r\n    //           <td>{company.getIn(['pe']).toFixed(2)}</td>\r\n    //           <td>{(100*company.getIn(['avgDividendRatio'])).toFixed(1) + '%'}</td>\r\n    //           <td>{company.getIn(['fitt']).toFixed(2)}</td>\r\n    //           <td>{Math.round(100 * 365  * company.getIn(['stockPriceMomentum'])) + '%'}</td>\r\n    //         </tr>\r\n    //       )}\r\n    //     </tbody>\r\n    //   </table>\r\n    // )\r\n\r\n    return [\r\n      <Table numRows={renderData.size} bodyContextMenuRenderer={(a) => this.openLink(renderData.get(a.target.cols[0]))}>\r\n        {/* <Column name=\"Borsdata\" cellRenderer={(rowIndex, columnIndex) =>\r\n          <Cell>\r\n            <AnchorButton\r\n              href={renderData.get('borsdataLink')}\r\n              rightIcon=\"share\"\r\n              target=\"_blank\"\r\n              text={\"Duplicate this page\"}\r\n            />\r\n          </Cell>\r\n        } /> */}\r\n        <Column name=\"Name\" cellRenderer={(rowIndex, columnIndex) =>\r\n          <Cell>{renderData.getIn([rowIndex, 'Name'])}</Cell>\r\n        } />\r\n        <Column name=\"Estimate\" cellRenderer={(rowIndex, columnIndex) =>\r\n          <Cell>{(100*renderData.getIn([rowIndex, 'estimate'])).toFixed(2) + '%'}</Cell>\r\n        } />\r\n        <Column name=\"Yield\" cellRenderer={(rowIndex, columnIndex) =>\r\n          <Cell>{(100*renderData.getIn([rowIndex, 'yield'])).toFixed(1) + '%'}</Cell>\r\n        } />\r\n        <Column name=\"P/E\" cellRenderer={(rowIndex, columnIndex) =>\r\n          <Cell>{renderData.getIn([rowIndex, 'pe']).toFixed(2)}</Cell>\r\n        } />\r\n        <Column name=\"Avg Dividend Ratio\" cellRenderer={(rowIndex, columnIndex) =>\r\n          <Cell>{(100*renderData.getIn([rowIndex, 'avgDividendRatio'])).toFixed(1) + '%'}</Cell>\r\n        } />\r\n        <Column name=\"Model fitt\" cellRenderer={(rowIndex, columnIndex) =>\r\n          <Cell>{renderData.getIn([rowIndex, 'fitt']).toFixed(2)}</Cell>\r\n        } />\r\n        <Column name=\"Momentum 90\" cellRenderer={(rowIndex, columnIndex) =>\r\n          <Cell>{Math.round(100 * 365  * renderData.getIn([rowIndex, 'stockPriceMomentum'])) + '%'}</Cell>\r\n        } />\r\n      </Table>\r\n    ]\r\n  }\r\n    \r\n  openLink(target) {\r\n    var win = window.open(target.get('borsdataLink')) // , '_blank');\r\n    // win.focus();\r\n  }\r\n}\r\n\r\nexport default Component;\r\n","import React from 'react';\r\nimport { AppContext } from '../AppContext'\r\n\r\n// https://codepen.io/nasrullahs/pen/QKYZdO\r\n\r\nconst paddingGroups = 50;\r\nconst viewBoxWidth = 1200;\r\nconst viewBoxHeigth = 1000;\r\n\r\nclass Sample extends React.Component {\r\n\r\n  static contextType = AppContext\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      historic: [[100, 8, -10], [10, 8, -10], [30, -100, 15]],\r\n      projection: [[10, 18], [12, 10], [-10, 10], [10, 10*Math.random()]],\r\n\r\n      points: [\r\n        { x: 30, y: 900 },\r\n        { x: 900, y: 900 },\r\n      ]\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { historic, projection } = this.state\r\n    const points = this.state.points\r\n    \r\n    const maxValue = Math.max(0, ...historic.flat(), ...projection.flat())\r\n    const minValue = Math.min(0, ...historic.flat(), ...projection.flat())\r\n\r\n    const yScaleFactor = viewBoxHeigth/(maxValue - minValue)\r\n    const zeroLevel = maxValue*yScaleFactor\r\n\r\n    const groups = historic.length + projection.length\r\n    const groupWidth = (viewBoxWidth - paddingGroups * groups) / groups\r\n\r\n    const historicBars = historic\r\n      .concat(projection)\r\n      .map((historicGroup, historicGroupIndex) =>\r\n      historicGroup.map((historicBar, historicBarIndex) => ({\r\n        x: paddingGroups*(historicGroupIndex) + groupWidth*(historicGroupIndex + historicBarIndex/historicGroup.length),\r\n        y: historicBar > 0 ? zeroLevel - historicBar*yScaleFactor : zeroLevel,\r\n        width: 10,\r\n        height: Math.abs(historicBar)*yScaleFactor,\r\n        fill: historicBar > 0 ? 'blue': 'red',\r\n      })))\r\n      .flat()  \r\n\r\n    console.log('historicBars', yScaleFactor, historicBars)\r\n\r\n    return (\r\n      <div>\r\n        <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeigth}`} ref={(svg) => this.svg = svg}>\r\n          {historicBars.map((bar, i) => \r\n            <rect {...bar} key={i}\r\n            ></rect>\r\n          )}\r\n          <line\r\n            x1={points[0].x} y1={points[0].y}\r\n            x2={points[1].x} y2={points[1].y}\r\n            fill=\"transparent\"\r\n            stroke=\"gray\"\r\n            strokeWidth=\"2\"\r\n            key=\"line\"\r\n          />\r\n          {points.map((point, i) =>\r\n            <g transform=\"translate(-15, -15)\" key={i}>\r\n              <rect\r\n                x={point.x}\r\n                y={point.y}\r\n                key={i}\r\n                width=\"30\"\r\n                height=\"30\"\r\n                onMouseDown={(e) => this.startDrag(e, i)}\r\n              />\r\n            </g>\r\n          )}\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  startDrag = (event, index) => {\r\n    event.preventDefault();\r\n\r\n    const mousemove = (event) => {\r\n      event.preventDefault();\r\n      let cursorPoint = this.svg.createSVGPoint();\r\n      cursorPoint.x = event.clientX;\r\n      cursorPoint.y = event.clientY;\r\n      cursorPoint = cursorPoint.matrixTransform(this.svg.getScreenCTM().inverse());\r\n      this.setState({\r\n        points: this.state.points.map(\r\n          (p, i) => (index === i ? {\r\n            x: Math.max(Math.min(cursorPoint.x, 1000), 0),\r\n            y: Math.max(Math.min(cursorPoint.y, 1000), 0)\r\n          } : p))\r\n      })\r\n    };\r\n\r\n    const mouseup = (event) => {\r\n      document.removeEventListener(\"mousemove\", mousemove);\r\n      document.removeEventListener(\"mouseup\", mouseup);\r\n    };\r\n\r\n    document.addEventListener(\"mousemove\", mousemove);\r\n    document.addEventListener(\"mouseup\", mouseup);\r\n  };\r\n}\r\n\r\nexport default Sample;\r\n","/**\r\n * @param {} values -\r\n *\r\n * http://mathworld.wolfram.com/LeastSquaresFitting.html\r\n */\r\nexport function leastSquarceEstimate(values) {\r\n  // values = removeOutliers(values);\r\n  const N = values.length;\r\n\r\n  var mt = values.reduce((sum, item, n) => sum + n, 0) / N;\r\n  var mx = values.reduce((sum, item, n) => sum + item, 0) / N;\r\n\r\n  var sstt = values.reduce((sum, item, n) => sum + (n - mt) * (n - mt), 0);\r\n  var ssxx = values.reduce((sum, item, n) => sum + (item - mx) * (item - mx), 0);\r\n  var sstx = values.reduce((cov, item, n) => cov + n * item, 0) - N * mt * mx;\r\n\r\n  var slope = sstx / sstt;\r\n  // var variance = (ssxx - slope * sstx) / (N - 2);\r\n\r\n  // if(N < 4) {\r\n  //   return [mx, 0, Math.sqrt(variance)];\r\n  // }\r\n\r\n  // return [mx - slope*mt + (N-1)*slope, slope, Math.sqrt(ssxx), sstx * sstx / sstt / ssxx];\r\n  return {\r\n    biasStart: mx,\r\n    biasEnd: mx - slope*mt + (N-1)*slope,\r\n    slope,\r\n    std: Math.sqrt(ssxx),\r\n    fitt: sstx * sstx / sstt / ssxx,\r\n  }\r\n}\r\n\r\nexport function earningsEstimate(earningsLs, netBrowing, projectionTime, intrest=0) {\r\n  const { biasEnd, slope } = earningsLs;\r\n\r\n  return (biasEnd + projectionTime*slope/2 - Math.max(netBrowing, 0)*intrest);\r\n}\r\n\r\nexport function dividendEstimate(company, projectionTime, intrest, type) {\r\n  const companyJs = company.toJS();\r\n  const { avgDividendRatio, netBrowing, earnings } = companyJs;\r\n  const dividendRatio = Math.min(avgDividendRatio, 0.8);\r\n\r\n  const estimationSeries = companyJs[type];\r\n\r\n  if(estimationSeries === undefined || estimationSeries.length < projectionTime) {\r\n    return NaN\r\n  }\r\n\r\n  const typeLs = leastSquarceEstimate(estimationSeries.slice(earnings.length-projectionTime, earnings.length))\r\n\r\n  return {\r\n    estimate: dividendRatio * earningsEstimate(typeLs, netBrowing, projectionTime, intrest),\r\n    fitt: typeLs.fitt,\r\n  }\r\n}\r\n\r\nexport function yearsToPayOff(company) {\r\n  const { earningsLs, avgDividendRatio, price } = company.toJS();\r\n  const dividendRatio = Math.min(avgDividendRatio, 0.8);\r\n\r\n  const [bias, slop, cov] = earningsLs;\r\n  return price / dividendRatio / (bias + slop/2);\r\n}\r\n\r\nexport function getProjection(company, projectionTime, type = 'earningCashFlowMergeLs') {\r\n  const companyJs = company.toJS();\r\n  const { avgDividendRatio, netBrowing } = companyJs;\r\n  const dividendRatio = Math.min(avgDividendRatio, 0.8);\r\n\r\n  const [bias, slop, cov] = companyJs[type];\r\n  return Array.from(Array(projectionTime), (e,i) => ({\r\n    year: 'Not Set',\r\n    revenue: 0,\r\n    freeCashFlow: 0,\r\n    earnings: bias + (i+1)*slop,\r\n    dividend: dividendRatio * (bias + (i+1)*slop)\r\n  }));\r\n}\r\n","import React from 'react'\r\nimport { Route, Redirect } from 'react-router'\r\nimport axios from 'axios'\r\nimport { fromJS } from 'immutable'\r\nimport { Slider } from \"@blueprintjs/core\";\r\n\r\n// import { AppContext } from './AppContext'\r\nimport StockTable from \"./Components/StockTable\"\r\nimport GraphInteractive from './Components/GraphInteractive'\r\nimport { dividendEstimate, earningsEstimate } from './Services/statistics'\r\n\r\n// import Index from './views/Index';\r\n// import Company from './views/Company';\r\n// import Return from './views/Return';\r\n// import Validation from './views/Validation';\r\n\r\n// TODO https://reacttraining.com/react-router/web/guides/scroll-restoration\r\n\r\nclass Routes extends React.Component {\r\n\r\n  state = {\r\n    selected: 'avanza',\r\n    estimateType: 'earnings',\r\n    minimumFittDynamic: 0.2,\r\n    minimumFitt: 0.2,\r\n    companiesExternal: fromJS({}),\r\n    companiesInternal: fromJS({\r\n      // \"NOVU\": {\r\n      //   yield: 2\r\n      // },\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(\"https://bofa.github.io/stocks/earnings.json\")\r\n      .then(response => {\r\n        const companiesAsObject = response.data\r\n          .reduce((acc, cur, i) => {\r\n            acc[cur.ShortName] = cur;\r\n            return acc;\r\n          }, {});\r\n        \r\n        this.setState({\r\n          companiesExternal: fromJS(companiesAsObject)\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { companiesExternal, companiesInternal, estimateType, minimumFitt, minimumFittDynamic } = this.state\r\n\r\n    const projectionTime = 5;\r\n\r\n    // console.log('state', this.state)\r\n    // console.log('companiesInternal', companiesExternal.toJS(), companiesInternal.toJS())\r\n\r\n    if(companiesExternal.size < 1) {\r\n      return null\r\n    }\r\n\r\n    const mergedCompanies = companiesExternal\r\n      .filter(company => company.getIn([estimateType]) && company.getIn([estimateType]).size >= projectionTime)\r\n      .map(company => {\r\n        // const leverageType = ''\r\n        // const [leverage, cost, type] = parseMargin(leverageType, company);\r\n        \r\n        const { estimate, fitt } = dividendEstimate(company, projectionTime, 0, estimateType)\r\n\r\n        return company\r\n          .set('estimate', estimate / company.get('price') / company.getIn(['numberOfStocks', -1]))\r\n          .set('fitt', fitt)\r\n          // .set('estimate', dividendEstimate(company, projectionTime, 0) / company.get('price') / company.getIn(['numberOfStocks', -1]), 0)\r\n          // .set('earningsEstimate', leverage*earningsEstimate(company, projectionTime) - cost)\r\n          // .set('earningsEstimate', earningsEstimate(company, projectionTime))\r\n          .set('yield', company.getIn(['dividend', -1]) / company.getIn(['price']) / company.getIn(['numberOfStocks', -1]))\r\n          .set('pe', company.getIn(['price']) * company.getIn(['numberOfStocks', -1]) / company.getIn(['earnings', -1]))\r\n          .set('borsdataLink', `https://borsdata.se/${company.get('CountryUrlName')}/nyckeltal`)\r\n      })\r\n      .mergeDeep(companiesInternal)\r\n      .filter(company => company.get('fitt') > minimumFitt)\r\n      .toList()\r\n\r\n    return [\r\n      <nav class=\"bp3-navbar .modifier\">\r\n        <div class=\"bp3-navbar-group bp3-align-left\">\r\n          <div class=\"bp3-navbar-heading\">Prediction</div>\r\n          <div class=\"bp3-select .modifier\">\r\n            <select value={estimateType} onChange={event => this.setState({ estimateType: event.currentTarget.value })}>\r\n              <option value=\"earnings\">Earnings</option>\r\n              <option value=\"revenue\">Revenue</option>\r\n              <option value=\"freeCashFlow\">Free Cash Flow</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"bp3-navbar-group bp3-align-right\">\r\n          <div>\r\n            <Slider\r\n              min={0}\r\n              max={1.0}\r\n              stepSize={0.01}\r\n              labelStepSize={0.14}\r\n              onChange={minimumFittDynamic => this.setState({ minimumFittDynamic })}\r\n              onRelease={minimumFitt => this.setState({ minimumFitt })}\r\n              labelRenderer={val => `${Math.round(val * 100)}%`}\r\n              value={minimumFittDynamic}\r\n            />\r\n          </div>\r\n        </div>\r\n      </nav>,\r\n      <Route path=\"/\" exact render={props => <StockTable {...props} companies={mergedCompanies} />} />,\r\n      <Route path=\"/:id\" exact render={props => <GraphInteractive {...props} companies={mergedCompanies} />} />\r\n    ]\r\n  }\r\n}\r\n\r\nexport default Routes","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\n\nimport './index.css';\nimport Routes from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<HashRouter><Routes /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
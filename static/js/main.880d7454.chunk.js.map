{"version":3,"sources":["Components/PopupSlider.js","Components/StockTable.js","AppContext.js","Components/NavbarInteractiveGraph.js","Components/GraphInteractive.js","Services/statistics.js","App.js","serviceWorker.js","index.js"],"names":["immutableMemo","props","content","width","style","padding","icon","minimal","history","companies","onChange","fittRange","dividendRatioRange","peRange","yieldRange","renderData","filter","c","get","sortBy","className","key","PopupSlider","value","min","max","stepSize","labelStepSize","vertical","map","company","i","href","rightIcon","target","onClick","push","getIn","toFixed","Math","round","AppContext","React","createContext","memo","onHome","Group","align","Heading","Divider","Sample","startDrag","event","index","preventDefault","mousemove","cursorPoint","svg","createSVGPoint","x","clientX","y","clientY","matrixTransform","getScreenCTM","inverse","setState","points","state","p","document","addEventListener","mouseup","removeEventListener","this","match","projectionTime","estimationTime","find","params","id","estimateFunc","console","log","toJS","historic","r","fromJS","fill","projection","Array","v","values","concat","flat","g","maxValue","yScaleFactor","zeroLevel","groups","length","groupWidth","transform","historicBars","historicGroup","historicGroupIndex","historicBar","historicBarIndex","height","abs","startLineN","stopLineN","startLine","stopLine","NavbarInteractiveGraph","goBack","margin","viewBox","ref","bar","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","point","onMouseDown","e","Component","contextType","leastSquarceEstimate","N","mt","reduce","sum","item","n","mx","sstt","ssxx","sstx","cov","slope","biasStart","biasEnd","std","sqrt","fitt","Routes","selected","estimateType","revenueGrowth","earningsGrowth","companiesExternal","companiesInternal","axios","then","response","companiesAsObject","data","acc","cur","ShortName","size","mergedCompanies","has","intrest","type","estimationSeries","companyJs","avgDividendRatio","netBrowing","earnings","dividendRatio","undefined","freeCashFlow","NaN","typeLs","slice","earningsEstimateFunc","earningsLs","time","earningsEstimate","estimate","s","t","dividendEstimate","revenueLs","set","mergeDeep","toList","filterSettings","currentTarget","checked","inline","label","path","exact","render","StockTable","param","GraphInteractive","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.880d7454.chunk.js","sourcesContent":["import React from 'react';\r\nimport { immutableMemo } from 'react-immutable-pure-component'\r\n// import { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { Button, Popover, RangeSlider } from \"@blueprintjs/core\";\r\n// import { AppContext } from '../AppContext';\r\n\r\nfunction component(props) {\r\n  return (\r\n    <Popover content={\r\n      <div width={200} style={{ padding: 10 }}>\r\n        <RangeSlider\r\n          {...props}\r\n          />\r\n      </div>}\r\n    >\r\n      <Button icon=\"filter\" minimal />\r\n    </Popover>\r\n  )\r\n}\r\n\r\n// function arePropsEqual(prevProps, nextProps) {\r\n//   return prevProps.companies.size === nextProps.companies.size; \r\n// }\r\n\r\nexport default immutableMemo(component)\r\n","import React, { } from 'react';\r\nimport { immutableMemo } from 'react-immutable-pure-component'\r\n// import { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { AnchorButton } from \"@blueprintjs/core\"\r\n\r\nimport PopupSlider from './PopupSlider'\r\n\r\nfunction component (props) {\r\n\r\n  const history = props.history\r\n  const { companies, onChange, fittRange, dividendRatioRange, peRange, yieldRange } = props;\r\n\r\n  // console.log('props', props)\r\n\r\n  const renderData = companies\r\n    .filter(c => c.get('estimate'))\r\n    .sortBy(c => -c.get('estimate'))\r\n    // .filter((c, i) => c.get('yield') > 0)\r\n    // .filter((c, i) => i < 50)\r\n    // .filter((c, i) => c.get('Name') === 'EVRY')\r\n\r\n  return (\r\n    <table className=\"bp3-html-table .modifier\" key=\"insideTable\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Estimate</th>\r\n          <th>\r\n            Yield\r\n            <PopupSlider\r\n              value={yieldRange}\r\n              onChange={yieldRange => onChange({ yieldRange })} \r\n              min={0}\r\n              max={0.2}\r\n              stepSize={0.01}\r\n              labelStepSize={0.02}\r\n              vertical\r\n            />\r\n          </th>\r\n          <th>\r\n            P/E\r\n            <PopupSlider\r\n              value={peRange}\r\n              onChange={peRange => onChange({ peRange })} \r\n              min={-100}\r\n              max={100}\r\n              stepSize={1}\r\n              labelStepSize={20}\r\n              vertical\r\n            />\r\n          </th>\r\n          <th>\r\n            Avg Div Ratio\r\n            <PopupSlider\r\n              value={dividendRatioRange}\r\n              onChange={dividendRatioRange => onChange({ dividendRatioRange })} \r\n              min={0}\r\n              max={2}\r\n              stepSize={0.1}\r\n              labelStepSize={0.1}\r\n              vertical\r\n            />\r\n          </th>\r\n          <th>\r\n            Model fitt\r\n            <PopupSlider\r\n              value={fittRange}\r\n              onChange={fittRange => onChange({ fittRange })} \r\n              min={0}\r\n              max={1}\r\n              stepSize={0.1}\r\n              labelStepSize={0.2}\r\n              vertical\r\n            />\r\n          </th>\r\n          <th>Momentum 90</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {renderData.map((company, i) => \r\n          <tr key={i}>\r\n            <td>\r\n              <AnchorButton\r\n                href={company.get('borsdataLink')}\r\n                rightIcon=\"share\"\r\n                target=\"_blank\"\r\n                minimal\r\n              />\r\n              <AnchorButton\r\n                onClick={() => history.push(company.get('ShortName'))}\r\n                // onClick={handleClick}\r\n                // href={company.get('CountryShortName')}\r\n                rightIcon=\"grouped-bar-chart\"\r\n                target=\"_blank\"\r\n                minimal\r\n              >\r\n                {/* <Link to={company.get('CountryShortName')}>Home</Link> */}\r\n              </AnchorButton>\r\n              \r\n              {company.getIn(['Name'])}\r\n            </td>\r\n            <td>{(100*company.getIn(['estimate'])).toFixed(2) + '%'}</td>\r\n            <td>{(100*company.getIn(['yield'])).toFixed(1) + '%'}</td>\r\n            <td>{company.getIn(['pe']).toFixed(2)}</td>\r\n            <td>{(100*company.getIn(['avgDividendRatio'])).toFixed(1) + '%'}</td>\r\n            <td>{company.getIn(['fitt']).toFixed(2)}</td>\r\n            <td>{Math.round(100 * 365  * company.getIn(['stockPriceMomentum'])) + '%'}</td>\r\n          </tr>\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\n// function arePropsEqual(prevProps, nextProps) {\r\n//   return prevProps.companies.size === nextProps.companies.size; \r\n// }\r\n\r\nexport default immutableMemo(component)\r\n","import React from 'react';\r\n\r\nexport const AppContext = React.createContext();","import React, { memo } from 'react';\r\nimport { Button, Popover, RangeSlider, Checkbox, Navbar } from \"@blueprintjs/core\";\r\n\r\nfunction component(props) {\r\n  const { company, onHome } = props\r\n\r\n  return (\r\n    <Navbar>\r\n      <Navbar.Group align=\"left\">\r\n        <Button className=\"bp3-minimal\" icon=\"home\" onClick={() => onHome()} />\r\n        <Navbar.Heading>{company.get('Name')}</Navbar.Heading>\r\n        <Navbar.Divider />\r\n        <div>\r\n          Estimate: {(100 * company.get('estimate')).toFixed(1)}%/y\r\n        </div>\r\n        <Navbar.Divider />\r\n        <div>\r\n          Fitt: {(100 * company.get('fitt')).toFixed(1)}%\r\n        </div>\r\n      </Navbar.Group>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\n// function arePropsEqual(prevProps, nextProps) {\r\n//   return prevProps.companies.size === nextProps.companies.size; \r\n// }\r\n\r\nexport default memo(component)\r\n","import React from 'react'\r\nimport { fromJS } from 'immutable'\r\nimport { AppContext } from '../AppContext'\r\nimport NavbarInteractiveGraph from './NavbarInteractiveGraph'\r\n\r\n// https://codepen.io/nasrullahs/pen/QKYZdO\r\n\r\nconst paddingGroups = 40;\r\nconst viewBoxWidth = 1200;\r\nconst viewBoxHeigth = 1000;\r\n\r\nclass Sample extends React.Component {\r\n\r\n  static contextType = AppContext\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // historic: [[100, 8, -10], [10, 8, -10], [30, -100, 15]],\r\n      // projection: [[10, 18], [12, 10], [-10, 10], [10, 10*Math.random()]],\r\n\r\n      points: [\r\n        { x: 30, y: 900 },\r\n        { x: 900, y: 900 },\r\n      ]\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { companies, match, projectionTime, estimationTime } = this.props\r\n    // const { historic, projection } = this.state\r\n    const points = this.state.points\r\n\r\n    const company = companies.find(company => company.get('ShortName') === match.params.id)\r\n    const estimateFunc = company.get('estimateFunc')\r\n\r\n    console.log('props', this.props, match.params.id)\r\n    // console.log('state', this.state)\r\n    // console.log('companies', companies.toJS())\r\n    console.log('company', company.toJS())\r\n    // console.log('company.get(revenue)', company.get('revenue').toJS())\r\n\r\n    const historic = company.get('revenue')\r\n      .map((r, i) => fromJS([\r\n        {\r\n          value: r,\r\n          fill: r > 0 ? '#123456' : 'red',\r\n        }, {\r\n          value: company.getIn(['freeCashFlow', i]),\r\n          fill: company.getIn(['freeCashFlow', i]) > 0 ? '#0eefcd' : 'red',\r\n        }, {\r\n          value: company.getIn(['earnings', i]),\r\n          fill: company.getIn(['earnings', i]) > 0 ? '#2d578b' : 'red',\r\n        }, {\r\n          value: company.getIn(['dividend', i]),\r\n          fill: company.getIn(['dividend', i]) > 0 ? '#035C43' : 'red',\r\n        }\r\n      ]))\r\n      .toJS()\r\n\r\n    const projection = new Array(projectionTime)\r\n      .fill(0)\r\n      .map((v, i) => estimateFunc(i))\r\n      .map(v => [{ value: v, fill: v > 0 ? \"#035C43\" : \"#ff0000\" }])\r\n\r\n    const values = historic.concat(projection).flat().map(g => g.value)\r\n\r\n    const maxValue = Math.max(0, ...values)\r\n    const minValue = Math.min(0, ...values)\r\n\r\n    const yScaleFactor = viewBoxHeigth/(maxValue - minValue)\r\n    const zeroLevel = maxValue*yScaleFactor\r\n\r\n    const groups = historic.length + projection.length\r\n    const groupWidth = (viewBoxWidth - paddingGroups * groups) / groups\r\n\r\n    const transform = (x, y) => ({\r\n      x: paddingGroups*(x) + groupWidth*(x + 0.5),\r\n      y: zeroLevel - y*yScaleFactor,\r\n    })\r\n\r\n    const historicBars = historic\r\n      .concat(projection)\r\n      .map((historicGroup, historicGroupIndex) =>\r\n      historicGroup.map((historicBar, historicBarIndex) => ({\r\n        x: paddingGroups*(historicGroupIndex) + groupWidth*(historicGroupIndex + historicBarIndex/historicGroup.length),\r\n        y: historicBar.value > 0 ? zeroLevel - historicBar.value*yScaleFactor : zeroLevel,\r\n        width: 10,\r\n        height: Math.abs(historicBar.value)*yScaleFactor,\r\n        fill: historicBar.fill,\r\n      })))\r\n      .flat()  \r\n\r\n    console.log('historicBars', yScaleFactor, historicBars)\r\n\r\n    const startLineN = historic.length - estimationTime\r\n    const stopLineN = historic.length + projectionTime\r\n\r\n    const startLine = transform(startLineN, estimateFunc(-estimationTime))\r\n    const stopLine = transform(stopLineN, estimateFunc(projectionTime))\r\n\r\n    console.log('line', startLineN, stopLineN, startLine, stopLine)\r\n\r\n    return (\r\n      <div>\r\n        <NavbarInteractiveGraph company={company} onHome={() => this.props.history.goBack()} />\r\n        <div style={{ margin: 20}}>\r\n          <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeigth}`} ref={(svg) => this.svg = svg}>\r\n            {historicBars.map((bar, i) => \r\n              <rect {...bar} key={i}\r\n              ></rect>\r\n            )}\r\n            <line\r\n              x1={startLine.x} y1={startLine.y}\r\n              x2={stopLine.x} y2={stopLine.y}\r\n              fill=\"transparent\"\r\n              stroke=\"gray\"\r\n              strokeWidth=\"4\"\r\n              strokeDasharray=\"5,5\"\r\n              key=\"line\"\r\n            />\r\n            {points.map((point, i) =>\r\n              <g transform=\"translate(-15, -15)\" key={i}>\r\n                <rect\r\n                  x={point.x}\r\n                  y={point.y}\r\n                  key={i}\r\n                  width=\"30\"\r\n                  height=\"30\"\r\n                  onMouseDown={(e) => this.startDrag(e, i)}\r\n                />\r\n              </g>\r\n            )}\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  startDrag = (event, index) => {\r\n    event.preventDefault();\r\n\r\n    const mousemove = (event) => {\r\n      event.preventDefault();\r\n      let cursorPoint = this.svg.createSVGPoint();\r\n      cursorPoint.x = event.clientX;\r\n      cursorPoint.y = event.clientY;\r\n      cursorPoint = cursorPoint.matrixTransform(this.svg.getScreenCTM().inverse());\r\n      this.setState({\r\n        points: this.state.points.map(\r\n          (p, i) => (index === i ? {\r\n            x: Math.max(Math.min(cursorPoint.x, 1000), 0),\r\n            y: Math.max(Math.min(cursorPoint.y, 1000), 0)\r\n          } : p))\r\n      })\r\n    };\r\n\r\n    const mouseup = (event) => {\r\n      document.removeEventListener(\"mousemove\", mousemove);\r\n      document.removeEventListener(\"mouseup\", mouseup);\r\n    };\r\n\r\n    document.addEventListener(\"mousemove\", mousemove);\r\n    document.addEventListener(\"mouseup\", mouseup);\r\n  };\r\n}\r\n\r\nexport default Sample;\r\n","/**\r\n * @param {} values -\r\n *\r\n * http://mathworld.wolfram.com/LeastSquaresFitting.html\r\n */\r\nexport function leastSquarceEstimate(values) {\r\n  // values = removeOutliers(values);\r\n  const N = values.length;\r\n\r\n  var mt = values.reduce((sum, item, n) => sum + n, 0) / N;\r\n  var mx = values.reduce((sum, item, n) => sum + item, 0) / N;\r\n\r\n  var sstt = values.reduce((sum, item, n) => sum + (n - mt) * (n - mt), 0);\r\n  var ssxx = values.reduce((sum, item, n) => sum + (item - mx) * (item - mx), 0);\r\n  var sstx = values.reduce((cov, item, n) => cov + n * item, 0) - N * mt * mx;\r\n\r\n  var slope = sstx / sstt;\r\n  // var variance = (ssxx - slope * sstx) / (N - 2);\r\n\r\n  // if(N < 4) {\r\n  //   return [mx, 0, Math.sqrt(variance)];\r\n  // }\r\n\r\n  // return [mx - slope*mt + (N-1)*slope, slope, Math.sqrt(ssxx), sstx * sstx / sstt / ssxx];\r\n  return {\r\n    biasStart: mx,\r\n    biasEnd: mx - slope*mt + (N-1)*slope,\r\n    slope,\r\n    std: Math.sqrt(ssxx),\r\n    fitt: sstx * sstx / sstt / ssxx,\r\n  }\r\n}\r\n\r\nexport function earningsEstimate(earningsLs, netBrowing, projectionTime, intrest=0) {\r\n  const { biasEnd, slope } = earningsLs;\r\n\r\n  // return (biasEnd + projectionTime*slope/2 - Math.max(netBrowing, 0)*intrest);\r\n  // return new Array(projectionTime).fill(0).map((v, i) => biasEnd + slope*i)\r\n\r\n  return (time) => biasEnd + slope*(time + 1)\r\n}\r\n\r\nexport function dividendEstimate(company, projectionTime, intrest, type, estimationTime) {\r\n  const companyJs = company.toJS();\r\n  const { avgDividendRatio, netBrowing, earnings } = companyJs;\r\n  const dividendRatio = Math.min(avgDividendRatio, 0.8);\r\n\r\n  // console.log('companyJs', companyJs)\r\n\r\n  let estimationSeries\r\n  if(type === 'combo') {\r\n    estimationSeries = companyJs.earnings.map((e, i) => (e + companyJs.freeCashFlow[i]) / 2)\r\n  } else {\r\n    estimationSeries = companyJs[type];\r\n  }\r\n\r\n  // console.log('estimationSeries', estimationSeries)\r\n\r\n  if(estimationSeries === undefined || estimationSeries.length < estimationTime) {\r\n    return NaN\r\n  }\r\n\r\n  const typeLs = leastSquarceEstimate(estimationSeries.slice(earnings.length-estimationTime, earnings.length))\r\n  const earningsEstimateFunc = earningsEstimate(typeLs, netBrowing, projectionTime, intrest)\r\n  \r\n  const dividendEstimateVector = new Array(projectionTime).fill(0).map((v, i) => dividendRatio*earningsEstimateFunc(i))\r\n  const estimateFunc = (t) => dividendRatio*earningsEstimateFunc(t)\r\n\r\n  return {\r\n    estimate: dividendEstimateVector.reduce((s, v) => s+v) / projectionTime,\r\n    fitt: typeLs.fitt,\r\n    estimateFunc,\r\n  }\r\n}\r\n\r\nexport function yearsToPayOff(company) {\r\n  const { earningsLs, avgDividendRatio, price } = company.toJS();\r\n  const dividendRatio = Math.min(avgDividendRatio, 0.8);\r\n\r\n  const [bias, slop] = earningsLs;\r\n  return price / dividendRatio / (bias + slop/2);\r\n}\r\n\r\nexport function getProjection(company, projectionTime, type = 'earningCashFlowMergeLs') {\r\n  const companyJs = company.toJS();\r\n  const { avgDividendRatio } = companyJs;\r\n  const dividendRatio = Math.min(avgDividendRatio, 0.8);\r\n\r\n  const [bias, slop] = companyJs[type];\r\n  return Array.from(Array(projectionTime), (e,i) => ({\r\n    year: 'Not Set',\r\n    revenue: 0,\r\n    freeCashFlow: 0,\r\n    earnings: bias + (i+1)*slop,\r\n    dividend: dividendRatio * (bias + (i+1)*slop)\r\n  }));\r\n}\r\n","import React from 'react'\r\nimport { Route } from 'react-router'\r\nimport axios from 'axios'\r\nimport { fromJS } from 'immutable'\r\nimport { Slider, Checkbox, Button, Popover, Navbar } from \"@blueprintjs/core\";\r\n\r\n// import { AppContext } from './AppContext'\r\nimport StockTable from \"./Components/StockTable\"\r\nimport GraphInteractive from './Components/GraphInteractive'\r\nimport { dividendEstimate, leastSquarceEstimate } from './Services/statistics'\r\n\r\n// import Index from './views/Index';\r\n// import Company from './views/Company';\r\n// import Return from './views/Return';\r\n// import Validation from './views/Validation';\r\n\r\n// TODO https://reacttraining.com/react-router/web/guides/scroll-restoration\r\n\r\nclass Routes extends React.Component {\r\n\r\n  state = {\r\n    selected: 'avanza',\r\n    estimateType: 'earnings',\r\n    revenueGrowth: true,\r\n    earningsGrowth: true,\r\n    fittRange: [0, 1],\r\n    dividendRatioRange: [0, 1],\r\n    peRange: [0, 100],\r\n    yieldRange: [0, 0.2],\r\n    projectionTime: 5,\r\n    estimationTime: 4,\r\n\r\n    companiesExternal: fromJS({}),\r\n    companiesInternal: fromJS({\r\n      // \"NOVU\": {\r\n      //   yield: 2\r\n      // },\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(\"https://bofa.github.io/stock-prediction/earnings.json\")\r\n      .then(response => {\r\n        const companiesAsObject = response.data\r\n          .reduce((acc, cur, i) => {\r\n            acc[cur.ShortName] = cur;\r\n            return acc;\r\n          }, {});\r\n        \r\n        this.setState({\r\n          companiesExternal: fromJS(companiesAsObject)\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { projectionTime, estimationTime, companiesExternal, companiesInternal, estimateType, revenueGrowth, earningsGrowth, fittRange, dividendRatioRange, peRange, yieldRange } = this.state\r\n\r\n    // const revenueGrowth = true\r\n    // const earningsGrowth = true\r\n\r\n    // console.log('state', this.state)\r\n    // console.log('companiesInternal', companiesExternal.toJS(), companiesInternal.toJS())\r\n\r\n    if(companiesExternal.size < 1) {\r\n      return null\r\n    }\r\n\r\n    const mergedCompanies = companiesExternal\r\n      .filter(company => company.has('earnings') && company.get('earnings').size >= estimationTime )\r\n      // .filter(company => company.getIn([estimateType]) && company.getIn([estimateType]).size >= projectionTime)\r\n      .map(company => {\r\n        // const leverageType = ''\r\n        // const [leverage, cost, type] = parseMargin(leverageType, company);\r\n        \r\n        const { estimate, fitt, estimateFunc } = dividendEstimate(company, projectionTime, 0, estimateType, estimationTime)\r\n\r\n        const revenueLs  = leastSquarceEstimate(company.get('revenue').slice(-estimationTime).toJS())\r\n        const earningsLs = leastSquarceEstimate(company.get('earnings').slice(-estimationTime).toJS())\r\n\r\n        return company\r\n          .set('estimate', estimate / company.get('price') / company.getIn(['numberOfStocks', -1]))\r\n          .set('estimateFunc', estimateFunc)\r\n          .set('fitt', fitt)\r\n          .set('revenueLs', fromJS(revenueLs))\r\n          .set('earningsLs', fromJS(earningsLs))\r\n          // .set('estimate', dividendEstimate(company, projectionTime, 0) / company.get('price') / company.getIn(['numberOfStocks', -1]), 0)\r\n          // .set('earningsEstimate', leverage*earningsEstimate(company, projectionTime) - cost)\r\n          // .set('earningsEstimate', earningsEstimate(company, projectionTime))\r\n          .set('yield', company.getIn(['dividend', -1]) / company.getIn(['price']) / company.getIn(['numberOfStocks', -1]))\r\n          .set('pe', company.getIn(['price']) * company.getIn(['numberOfStocks', -1]) / company.getIn(['earnings', -1]))\r\n          .set('borsdataLink', `https://borsdata.se/${company.get('CountryUrlName')}/nyckeltal`)\r\n      })\r\n      .filter(company => !revenueGrowth || company.getIn(['revenueLs', 'slope']) > 0)\r\n      .filter(company => !earningsGrowth || company.getIn(['earningsLs', 'slope']) > 0)\r\n      .mergeDeep(companiesInternal)\r\n      .filter(company => company.get('fitt') >= fittRange[0] && company.get('fitt') <= fittRange[1])\r\n      .filter(company => company.get('pe') >= peRange[0] && company.get('pe') <= peRange[1])\r\n      .filter(company => company.get('yield') >= yieldRange[0] && company.get('yield') <= yieldRange[1])\r\n      .filter(company => company.get('avgDividendRatio') >= dividendRatioRange[0] && company.get('avgDividendRatio') <= dividendRatioRange[1])\r\n      .toList()\r\n\r\n    console.log('mergedCompanies', mergedCompanies.toJS())\r\n\r\n    const filterSettings = {\r\n      fittRange, dividendRatioRange, peRange, yieldRange\r\n    }\r\n\r\n    return [\r\n      <Navbar>\r\n        <Navbar.Group align=\"left\">\r\n            <Navbar.Heading>Stock Prediction</Navbar.Heading>\r\n            <Navbar.Divider />\r\n            <select value={estimateType} onChange={event => this.setState({ estimateType: event.currentTarget.value })}>\r\n              <option value=\"earnings\">Earnings</option>\r\n              <option value=\"revenue\">Revenue</option>\r\n              <option value=\"freeCashFlow\">Free Cash Flow</option>\r\n              <option value=\"combo\">Combo</option>\r\n            </select>\r\n\r\n            <Checkbox checked={revenueGrowth} inline label=\"Revenue Growth\" onChange={e => this.setState({ revenueGrowth: e.target.checked })} />\r\n            <Checkbox checked={earningsGrowth} inline label=\"Earnings Growth\" onChange={e => this.setState({ earningsGrowth: e.target.checked })} />\r\n\r\n            <Popover content={\r\n              <div width={200} style={{ padding: 10 }}>\r\n                <Slider\r\n                  value={estimationTime}\r\n                  onChange={estimationTime => this.setState({ estimationTime })} \r\n                  min={2}\r\n                  max={10}\r\n                  stepSize={1}\r\n                  labelStepSize={2}\r\n                  vertical\r\n                  />\r\n              </div>}\r\n            >\r\n              <Button icon=\"filter\" minimal >\r\n                {estimationTime} Est Time\r\n              </Button>\r\n            </Popover>\r\n\r\n            <Popover content={\r\n              <div width={200} style={{ padding: 10 }}>\r\n                <Slider\r\n                  value={projectionTime}\r\n                  onChange={projectionTime => this.setState({ projectionTime })} \r\n                  min={2}\r\n                  max={10}\r\n                  stepSize={1}\r\n                  labelStepSize={2}\r\n                  vertical\r\n                  />\r\n              </div>}\r\n            >\r\n              <Button icon=\"filter\" minimal>\r\n                {projectionTime} Proj Time\r\n              </Button>\r\n            </Popover>\r\n\r\n        </Navbar.Group>\r\n      </Navbar>,\r\n\r\n      <Route key=\"routeTable\" path=\"/\" exact render={props => <StockTable key=\"table\" {...props} companies={mergedCompanies} {...filterSettings} onChange={param => this.setState(param)} />} />,\r\n      <Route key=\"routeGraph\" path=\"/:id\" exact render={props => <GraphInteractive key=\"graph\" {...props} estimationTime={estimationTime} projectionTime={projectionTime} companies={mergedCompanies} />} />\r\n    ]\r\n  }\r\n}\r\n\r\nexport default Routes","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\n\nimport './index.css';\nimport Routes from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<HashRouter><Routes /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
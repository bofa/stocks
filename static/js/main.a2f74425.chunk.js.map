{"version":3,"sources":["Components/StockTable.js","AppContext.js","Components/GraphInteractive.js","Services/statistics.js","App.js","serviceWorker.js","index.js"],"names":["immutableMemo","props","renderData","companies","filter","c","get","sortBy","filterSlider","content","width","style","padding","icon","minimal","class","map","company","getIn","toFixed","Math","round","AppContext","React","createContext","Sample","startDrag","event","index","preventDefault","mousemove","cursorPoint","svg","createSVGPoint","x","clientX","y","clientY","matrixTransform","getScreenCTM","inverse","setState","points","state","p","i","max","min","document","addEventListener","mouseup","removeEventListener","historic","projection","random","this","match","find","params","id","console","log","toJS","maxValue","flat","yScaleFactor","zeroLevel","groups","length","groupWidth","historicBars","concat","historicGroup","historicGroupIndex","historicBar","historicBarIndex","height","abs","fill","viewBox","ref","bar","key","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","point","transform","onMouseDown","e","Component","contextType","leastSquarceEstimate","values","N","mt","reduce","sum","item","n","mx","sstt","ssxx","sstx","cov","slope","biasStart","biasEnd","std","sqrt","fitt","earningsEstimate","earningsLs","netBrowing","projectionTime","intrest","Routes","selected","estimateType","minimumFittDynamic","minimumFitt","revenueGrowth","earningsGrowth","companiesExternal","fromJS","companiesInternal","axios","then","response","companiesAsObject","data","acc","cur","ShortName","size","mergedCompanies","has","type","estimationSeries","companyJs","avgDividendRatio","earnings","dividendRatio","undefined","freeCashFlow","NaN","typeLs","slice","estimate","dividendEstimate","revenueLs","set","mergeDeep","toList","value","onChange","currentTarget","checked","inline","label","target","stepSize","labelStepSize","onRelease","labelRenderer","val","path","exact","render","StockTable","GraphInteractive","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2f74425.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport { immutableMemo } from 'react-immutable-pure-component'\r\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { AnchorButton, Button, Popover, Menu, Slider } from \"@blueprintjs/core\";\r\n// import { AppContext } from '../AppContext';\r\n \r\nfunction openLink(target) {\r\n  var win = window.open(target.get('borsdataLink')) // , '_blank');\r\n  // win.focus();\r\n}\r\n\r\nfunction component (props) {\r\n\r\n  // static contextType = AppContext\r\n\r\n  // console.log('table state', this.state, this.props, this.context)\r\n\r\n  const { companies } = props;\r\n\r\n  // console.log('companies', companies)\r\n\r\n  const renderData = companies\r\n    .filter(c => c.get('estimate'))\r\n    .sortBy(c => -c.get('estimate'))\r\n    // .filter((c, i) => c.get('yield') > 0)\r\n    // .filter((c, i) => i < 50)\r\n    // .filter((c, i) => c.get('Name') === 'EVRY')\r\n    \r\n  // const columnValues = renderData.map(company => [\r\n  //     company.get('Name'),\r\n  //     (100*company.getIn(['estimate'])).toFixed(2) + '%',\r\n  //     company.getIn(['fitt']).toFixed(2),\r\n  //     (100*company.getIn(['yield'])).toFixed(1) + '%',\r\n  //     company.getIn(['pe']).toFixed(2),\r\n  //     (100*company.getIn(['avgDividendRatio'])).toFixed(1) + '%',\r\n  //     Math.round(100 * 365  * company.getIn(['stockPriceMomentum'])) + '%',\r\n  //   ])\r\n\r\n  // console.log('companies', renderData.toJS())\r\n\r\n  const filterSlider = (\r\n    <Popover content={<div width={200} style={{ padding: 10 }}><Slider></Slider></div>} >\r\n      <Button icon=\"filter\" minimal />\r\n    </Popover>\r\n  )\r\n\r\n  return (\r\n    <table class=\"bp3-html-table .modifier\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Estimate <Button icon=\"filter\" minimal/></th>\r\n          <th>Yield <Button icon=\"filter\" minimal/></th>\r\n          <th>P/E <Button icon=\"filter\" minimal/></th>\r\n          <th>Avg Dividend Ratio <Button icon=\"filter\" minimal/></th>\r\n          <th>Model fitt <Button icon=\"filter\" minimal/></th>\r\n          <th>\r\n            Momentum 90\r\n            {filterSlider}\r\n            </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {renderData.map(company => \r\n          <tr>\r\n            <td>{company.getIn(['Name'])}</td>\r\n            <td>{(100*company.getIn(['estimate'])).toFixed(2) + '%'}</td>\r\n            <td>{(100*company.getIn(['yield'])).toFixed(1) + '%'}</td>\r\n            <td>{company.getIn(['pe']).toFixed(2)}</td>\r\n            <td>{(100*company.getIn(['avgDividendRatio'])).toFixed(1) + '%'}</td>\r\n            <td>{company.getIn(['fitt']).toFixed(2)}</td>\r\n            <td>{Math.round(100 * 365  * company.getIn(['stockPriceMomentum'])) + '%'}</td>\r\n          </tr>\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  )\r\n\r\n  // const columnMap = ['Name', 'estimate', 'yield', 'pe', 'avgDividendRatio', 'fitt', 'stockPriceMomentum']\r\n  // const cellRenderer = (rowIndex, columnIndex) => <Cell>{columnValues.getIn([rowIndex, columnIndex])} </Cell>\r\n\r\n  // return [\r\n  //   <Table numRows={renderData.size} bodyContextMenuRenderer={(a) => openLink(renderData.get(a.target.cols[0]))}>\r\n  //     {/* <Column name=\"Borsdata\" cellRenderer={(rowIndex, columnIndex) =>\r\n  //       <Cell>\r\n  //         <AnchorButton\r\n  //           href={renderData.get('borsdataLink')}\r\n  //           rightIcon=\"share\"\r\n  //           target=\"_blank\"\r\n  //           text={\"Duplicate this page\"}\r\n  //         />\r\n  //       </Cell>\r\n  //     } /> */}\r\n  //     <Column name=\"Name\" cellRenderer={cellRenderer} />\r\n  //     <Column name=\"Estimate\" cellRenderer={cellRenderer} />\r\n  //     <Column name=\"Model fitt\" cellRenderer={cellRenderer} />\r\n  //     <Column name=\"Yield\" cellRenderer={cellRenderer} />\r\n  //     <Column name=\"P/E\" cellRenderer={cellRenderer} />\r\n  //     <Column name=\"Avg Dividend Ratio\" cellRenderer={cellRenderer} />\r\n  //     <Column name=\"Momentum 90\" cellRenderer={cellRenderer} />\r\n  //   </Table>\r\n  // ]\r\n}\r\n\r\n// function arePropsEqual(prevProps, nextProps) {\r\n//   return prevProps.companies.size === nextProps.companies.size; \r\n// }\r\n\r\nexport default immutableMemo(component)\r\n","import React from 'react';\r\n\r\nexport const AppContext = React.createContext();","import React from 'react';\r\nimport { AppContext } from '../AppContext'\r\n\r\n// https://codepen.io/nasrullahs/pen/QKYZdO\r\n\r\nconst paddingGroups = 50;\r\nconst viewBoxWidth = 1200;\r\nconst viewBoxHeigth = 1000;\r\n\r\nclass Sample extends React.Component {\r\n\r\n  static contextType = AppContext\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      historic: [[100, 8, -10], [10, 8, -10], [30, -100, 15]],\r\n      projection: [[10, 18], [12, 10], [-10, 10], [10, 10*Math.random()]],\r\n\r\n      points: [\r\n        { x: 30, y: 900 },\r\n        { x: 900, y: 900 },\r\n      ]\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { companies, match } = this.props\r\n    const { historic, projection } = this.state\r\n    const points = this.state.points\r\n    \r\n    const company = companies.find(company => company.get('ShortName') === match.params.id)\r\n\r\n    console.log('props', this.props, match.params.id)\r\n    console.log('state', this.state)\r\n    console.log('companies', companies.toJS())\r\n    console.log('company', company)\r\n\r\n    const maxValue = Math.max(0, ...historic.flat(), ...projection.flat())\r\n    const minValue = Math.min(0, ...historic.flat(), ...projection.flat())\r\n\r\n    const yScaleFactor = viewBoxHeigth/(maxValue - minValue)\r\n    const zeroLevel = maxValue*yScaleFactor\r\n\r\n    const groups = historic.length + projection.length\r\n    const groupWidth = (viewBoxWidth - paddingGroups * groups) / groups\r\n\r\n    const historicBars = historic\r\n      .concat(projection)\r\n      .map((historicGroup, historicGroupIndex) =>\r\n      historicGroup.map((historicBar, historicBarIndex) => ({\r\n        x: paddingGroups*(historicGroupIndex) + groupWidth*(historicGroupIndex + historicBarIndex/historicGroup.length),\r\n        y: historicBar > 0 ? zeroLevel - historicBar*yScaleFactor : zeroLevel,\r\n        width: 10,\r\n        height: Math.abs(historicBar)*yScaleFactor,\r\n        fill: historicBar > 0 ? 'blue': 'red',\r\n      })))\r\n      .flat()  \r\n\r\n    console.log('historicBars', yScaleFactor, historicBars)\r\n\r\n    return (\r\n      <div>\r\n        <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeigth}`} ref={(svg) => this.svg = svg}>\r\n          {historicBars.map((bar, i) => \r\n            <rect {...bar} key={i}\r\n            ></rect>\r\n          )}\r\n          <line\r\n            x1={points[0].x} y1={points[0].y}\r\n            x2={points[1].x} y2={points[1].y}\r\n            fill=\"transparent\"\r\n            stroke=\"gray\"\r\n            strokeWidth=\"4\"\r\n            strokeDasharray=\"5,5\"\r\n            key=\"line\"\r\n          />\r\n          {points.map((point, i) =>\r\n            <g transform=\"translate(-15, -15)\" key={i}>\r\n              <rect\r\n                x={point.x}\r\n                y={point.y}\r\n                key={i}\r\n                width=\"30\"\r\n                height=\"30\"\r\n                onMouseDown={(e) => this.startDrag(e, i)}\r\n              />\r\n            </g>\r\n          )}\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  startDrag = (event, index) => {\r\n    event.preventDefault();\r\n\r\n    const mousemove = (event) => {\r\n      event.preventDefault();\r\n      let cursorPoint = this.svg.createSVGPoint();\r\n      cursorPoint.x = event.clientX;\r\n      cursorPoint.y = event.clientY;\r\n      cursorPoint = cursorPoint.matrixTransform(this.svg.getScreenCTM().inverse());\r\n      this.setState({\r\n        points: this.state.points.map(\r\n          (p, i) => (index === i ? {\r\n            x: Math.max(Math.min(cursorPoint.x, 1000), 0),\r\n            y: Math.max(Math.min(cursorPoint.y, 1000), 0)\r\n          } : p))\r\n      })\r\n    };\r\n\r\n    const mouseup = (event) => {\r\n      document.removeEventListener(\"mousemove\", mousemove);\r\n      document.removeEventListener(\"mouseup\", mouseup);\r\n    };\r\n\r\n    document.addEventListener(\"mousemove\", mousemove);\r\n    document.addEventListener(\"mouseup\", mouseup);\r\n  };\r\n}\r\n\r\nexport default Sample;\r\n","/**\r\n * @param {} values -\r\n *\r\n * http://mathworld.wolfram.com/LeastSquaresFitting.html\r\n */\r\nexport function leastSquarceEstimate(values) {\r\n  // values = removeOutliers(values);\r\n  const N = values.length;\r\n\r\n  var mt = values.reduce((sum, item, n) => sum + n, 0) / N;\r\n  var mx = values.reduce((sum, item, n) => sum + item, 0) / N;\r\n\r\n  var sstt = values.reduce((sum, item, n) => sum + (n - mt) * (n - mt), 0);\r\n  var ssxx = values.reduce((sum, item, n) => sum + (item - mx) * (item - mx), 0);\r\n  var sstx = values.reduce((cov, item, n) => cov + n * item, 0) - N * mt * mx;\r\n\r\n  var slope = sstx / sstt;\r\n  // var variance = (ssxx - slope * sstx) / (N - 2);\r\n\r\n  // if(N < 4) {\r\n  //   return [mx, 0, Math.sqrt(variance)];\r\n  // }\r\n\r\n  // return [mx - slope*mt + (N-1)*slope, slope, Math.sqrt(ssxx), sstx * sstx / sstt / ssxx];\r\n  return {\r\n    biasStart: mx,\r\n    biasEnd: mx - slope*mt + (N-1)*slope,\r\n    slope,\r\n    std: Math.sqrt(ssxx),\r\n    fitt: sstx * sstx / sstt / ssxx,\r\n  }\r\n}\r\n\r\nexport function earningsEstimate(earningsLs, netBrowing, projectionTime, intrest=0) {\r\n  const { biasEnd, slope } = earningsLs;\r\n\r\n  return (biasEnd + projectionTime*slope/2 - Math.max(netBrowing, 0)*intrest);\r\n}\r\n\r\nexport function dividendEstimate(company, projectionTime, intrest, type) {\r\n  const companyJs = company.toJS();\r\n  const { avgDividendRatio, netBrowing, earnings } = companyJs;\r\n  const dividendRatio = Math.min(avgDividendRatio, 0.8);\r\n\r\n  // console.log('companyJs', companyJs)\r\n\r\n  let estimationSeries\r\n  if(type === 'combo') {\r\n    estimationSeries = companyJs.earnings.map((e, i) => (e + companyJs.freeCashFlow[i]) / 2)\r\n  } else {\r\n    estimationSeries = companyJs[type];\r\n  }\r\n\r\n  // console.log('estimationSeries', estimationSeries)\r\n\r\n  if(estimationSeries === undefined || estimationSeries.length < projectionTime) {\r\n    return NaN\r\n  }\r\n\r\n  const typeLs = leastSquarceEstimate(estimationSeries.slice(earnings.length-projectionTime, earnings.length))\r\n\r\n  return {\r\n    estimate: dividendRatio * earningsEstimate(typeLs, netBrowing, projectionTime, intrest),\r\n    fitt: typeLs.fitt,\r\n  }\r\n}\r\n\r\nexport function yearsToPayOff(company) {\r\n  const { earningsLs, avgDividendRatio, price } = company.toJS();\r\n  const dividendRatio = Math.min(avgDividendRatio, 0.8);\r\n\r\n  const [bias, slop, cov] = earningsLs;\r\n  return price / dividendRatio / (bias + slop/2);\r\n}\r\n\r\nexport function getProjection(company, projectionTime, type = 'earningCashFlowMergeLs') {\r\n  const companyJs = company.toJS();\r\n  const { avgDividendRatio, netBrowing } = companyJs;\r\n  const dividendRatio = Math.min(avgDividendRatio, 0.8);\r\n\r\n  const [bias, slop, cov] = companyJs[type];\r\n  return Array.from(Array(projectionTime), (e,i) => ({\r\n    year: 'Not Set',\r\n    revenue: 0,\r\n    freeCashFlow: 0,\r\n    earnings: bias + (i+1)*slop,\r\n    dividend: dividendRatio * (bias + (i+1)*slop)\r\n  }));\r\n}\r\n","import React from 'react'\r\nimport { Route, Redirect } from 'react-router'\r\nimport axios from 'axios'\r\nimport { fromJS } from 'immutable'\r\nimport { Slider, Checkbox, Button } from \"@blueprintjs/core\";\r\n\r\n// import { AppContext } from './AppContext'\r\nimport StockTable from \"./Components/StockTable\"\r\nimport GraphInteractive from './Components/GraphInteractive'\r\nimport { dividendEstimate, earningsEstimate, leastSquarceEstimate } from './Services/statistics'\r\n\r\n// import Index from './views/Index';\r\n// import Company from './views/Company';\r\n// import Return from './views/Return';\r\n// import Validation from './views/Validation';\r\n\r\n// TODO https://reacttraining.com/react-router/web/guides/scroll-restoration\r\n\r\nclass Routes extends React.Component {\r\n\r\n  state = {\r\n    selected: 'avanza',\r\n    estimateType: 'earnings',\r\n    minimumFittDynamic: 0.2,\r\n    minimumFitt: 0.2,\r\n    revenueGrowth: false,\r\n    earningsGrowth: false,\r\n\r\n    companiesExternal: fromJS({}),\r\n    companiesInternal: fromJS({\r\n      // \"NOVU\": {\r\n      //   yield: 2\r\n      // },\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(\"https://bofa.github.io/stock-prediction/earnings.json\")\r\n      .then(response => {\r\n        const companiesAsObject = response.data\r\n          .reduce((acc, cur, i) => {\r\n            acc[cur.ShortName] = cur;\r\n            return acc;\r\n          }, {});\r\n        \r\n        this.setState({\r\n          companiesExternal: fromJS(companiesAsObject)\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { companiesExternal, companiesInternal, estimateType, minimumFitt, minimumFittDynamic, revenueGrowth, earningsGrowth } = this.state\r\n\r\n    const projectionTime = 5;\r\n    const estimationTime = 4;\r\n\r\n    // const revenueGrowth = true\r\n    // const earningsGrowth = true\r\n\r\n    // console.log('state', this.state)\r\n    // console.log('companiesInternal', companiesExternal.toJS(), companiesInternal.toJS())\r\n\r\n    if(companiesExternal.size < 1) {\r\n      return null\r\n    }\r\n\r\n    const mergedCompanies = companiesExternal\r\n      .filter(company => company.has('earnings') && company.get('earnings').size >= estimationTime )\r\n      // .filter(company => company.getIn([estimateType]) && company.getIn([estimateType]).size >= projectionTime)\r\n      .map(company => {\r\n        // const leverageType = ''\r\n        // const [leverage, cost, type] = parseMargin(leverageType, company);\r\n        \r\n        const { estimate, fitt } = dividendEstimate(company, projectionTime, 0, estimateType)\r\n\r\n        const revenueLs  = leastSquarceEstimate(company.get('revenue').slice(-estimationTime).toJS())\r\n        const earningsLs = leastSquarceEstimate(company.get('earnings').slice(-estimationTime).toJS())\r\n\r\n        return company\r\n          .set('estimate', estimate / company.get('price') / company.getIn(['numberOfStocks', -1]))\r\n          .set('fitt', fitt)\r\n          .set('revenueLs', fromJS(revenueLs))\r\n          .set('earningsLs', fromJS(earningsLs))\r\n          // .set('estimate', dividendEstimate(company, projectionTime, 0) / company.get('price') / company.getIn(['numberOfStocks', -1]), 0)\r\n          // .set('earningsEstimate', leverage*earningsEstimate(company, projectionTime) - cost)\r\n          // .set('earningsEstimate', earningsEstimate(company, projectionTime))\r\n          .set('yield', company.getIn(['dividend', -1]) / company.getIn(['price']) / company.getIn(['numberOfStocks', -1]))\r\n          .set('pe', company.getIn(['price']) * company.getIn(['numberOfStocks', -1]) / company.getIn(['earnings', -1]))\r\n          .set('borsdataLink', `https://borsdata.se/${company.get('CountryUrlName')}/nyckeltal`)\r\n      })\r\n      .filter(company => !revenueGrowth || company.getIn(['revenueLs', 'slope']) > 0)\r\n      .filter(company => !earningsGrowth || company.getIn(['earningsLs', 'slope']) > 0)\r\n      .mergeDeep(companiesInternal)\r\n      .filter(company => company.get('fitt') > minimumFitt)\r\n      .toList()\r\n\r\n    // console.log('mergedCompanies', mergedCompanies.toJS())\r\n    console.log('revenueGrowth', revenueGrowth)\r\n\r\n    return [\r\n      <nav class=\"bp3-navbar .modifier\">\r\n        <div class=\"bp3-navbar-group bp3-align-left\">\r\n          <div class=\"bp3-navbar-heading\">Prediction</div>\r\n          <div class=\"bp3-select .modifier\">\r\n            <select value={estimateType} onChange={event => this.setState({ estimateType: event.currentTarget.value })}>\r\n              <option value=\"earnings\">Earnings</option>\r\n              <option value=\"revenue\">Revenue</option>\r\n              <option value=\"freeCashFlow\">Free Cash Flow</option>\r\n              <option value=\"combo\">Combo</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"bp3-navbar-group\">\r\n            <Checkbox checked={revenueGrowth} inline label=\"Revenue Growth\" onChange={e => this.setState({ revenueGrowth: e.target.checked })} />\r\n            <Checkbox checked={earningsGrowth} inline label=\"Earnings Growth\" onChange={e => this.setState({ earningsGrowth: e.target.checked })} />\r\n          </div>\r\n        </div>\r\n        <div class=\"bp3-navbar-group bp3-align-right\">\r\n          <div>\r\n            <Slider\r\n              min={0}\r\n              max={1.0}\r\n              stepSize={0.01}\r\n              labelStepSize={0.14}\r\n              onChange={minimumFittDynamic => this.setState({ minimumFittDynamic })}\r\n              onRelease={minimumFitt => this.setState({ minimumFitt })}\r\n              labelRenderer={val => `${Math.round(val * 100)}%`}\r\n              value={minimumFittDynamic}\r\n            />\r\n          </div>\r\n        </div>\r\n      </nav>,\r\n      <Route path=\"/\" exact render={props => <StockTable {...props} companies={mergedCompanies} />} />,\r\n      <Route path=\"/:id\" exact render={props => <GraphInteractive {...props} companies={mergedCompanies} />} />\r\n    ]\r\n  }\r\n}\r\n\r\nexport default Routes","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\n\nimport './index.css';\nimport Routes from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<HashRouter><Routes /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
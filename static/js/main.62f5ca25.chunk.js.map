{"version":3,"sources":["Components/PopupSlider.js","Components/StockTable.js","Components/NavbarInteractiveGraph.js","Components/GraphInteractive.js","Services/statistics.js","App.js","serviceWorker.js","index.js"],"names":["immutableMemo","props","content","width","style","padding","icon","minimal","history","companies","onChange","fittRange","dividendRatioRange","peRange","yieldRange","renderData","filter","c","get","sortBy","className","key","PopupSlider","value","min","max","stepSize","labelStepSize","vertical","map","company","i","href","rightIcon","target","onClick","push","getIn","toFixed","Math","round","memo","onHome","Group","align","Heading","Divider","Sample","this","match","projectionTime","estimationTime","find","params","id","estimateFunc","console","log","toJS","historic","r","fromJS","fill","projection","Array","v","isNaN","o","onMouseDown","e","startDrag","values","concat","flat","g","maxValue","yScaleFactor","zeroLevel","groups","length","groupWidth","transform","n","x","y","historicBars","group","groupIndex","bar","barIndex","height","abs","startLineN","stopLineN","startLine","stopLine","event","index","preventDefault","document","addEventListener","mouseup","cursorPoint","svg","createSVGPoint","clientX","clientY","matrixTransform","getScreenCTM","inverse","setEstimateAdjusted","removeEventListener","NavbarInteractiveGraph","goBack","margin","viewBox","ref","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","React","Component","leastSquarceEstimate","N","mt","reduce","sum","item","mx","sstt","ssxx","sstx","cov","slope","biasStart","biasEnd","std","sqrt","fitt","Routes","localStorageFilterSettings","localStorage","getItem","localStorageCompaniesInternal","state","selected","estimateType","revenueGrowth","earningsGrowth","netBrowingDecline","JSON","parse","companiesExternal","Map","companiesInternal","companiesSheets","getEarnings$","axios","then","response","data","acc","cur","ShortName","setState","getAmazingSheets$","feed","entry","row","Promise","all","sheetUrlName","sheetsPrice","d","price","size","mergedCompanies","mergeDeep","intrest","type","estimationSeries","undefined","NaN","estSeriesSlice","slice","estSlice","s","a","dividendRatio","typeLs","earningsEstimateFunc","earningsLs","netBrowing","time","earningsEstimate","t","dividendEstimate","estimate","revenueLs","netBrowingLs","set","toList","filteredCompanies","has","filterSettings","setItem","stringify","currentTarget","checked","inline","label","path","exact","render","StockTable","param","GraphInteractive","shortName","setIn","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62f5ca25.chunk.js","sourcesContent":["import React from 'react';\r\nimport { immutableMemo } from 'react-immutable-pure-component'\r\n// import { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { Button, Popover, RangeSlider } from \"@blueprintjs/core\";\r\n// import { AppContext } from '../AppContext';\r\n\r\nfunction component(props) {\r\n  return (\r\n    <Popover content={\r\n      <div width={200} style={{ padding: 10 }}>\r\n        <RangeSlider\r\n          {...props}\r\n          />\r\n      </div>}\r\n    >\r\n      <Button icon=\"filter\" minimal />\r\n    </Popover>\r\n  )\r\n}\r\n\r\n// function arePropsEqual(prevProps, nextProps) {\r\n//   return prevProps.companies.size === nextProps.companies.size; \r\n// }\r\n\r\nexport default immutableMemo(component)\r\n","import React, { } from 'react';\r\nimport { immutableMemo } from 'react-immutable-pure-component'\r\n// import { Cell, Column, Table } from \"@blueprintjs/table\";\r\nimport { AnchorButton } from \"@blueprintjs/core\"\r\n\r\nimport PopupSlider from './PopupSlider'\r\n\r\nfunction component (props) {\r\n\r\n  const history = props.history\r\n  const { companies, onChange, fittRange, dividendRatioRange, peRange, yieldRange } = props;\r\n\r\n  // console.log('props', props)\r\n\r\n  const renderData = companies\r\n    .filter(c => c.get('estimate'))\r\n    .sortBy(c => -c.get('estimate'))\r\n    // .filter((c, i) => c.get('yield') > 0)\r\n    // .filter((c, i) => i < 50)\r\n    // .filter((c, i) => c.get('Name') === 'EVRY')\r\n\r\n  return (\r\n    <table className=\"bp3-html-table .modifier\" key=\"insideTable\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Estimate</th>\r\n          <th>\r\n            Yield\r\n            <PopupSlider\r\n              value={yieldRange}\r\n              onChange={yieldRange => onChange({ yieldRange })} \r\n              min={0}\r\n              max={0.2}\r\n              stepSize={0.01}\r\n              labelStepSize={0.02}\r\n              vertical\r\n            />\r\n          </th>\r\n          <th>\r\n            P/E\r\n            <PopupSlider\r\n              value={peRange}\r\n              onChange={peRange => onChange({ peRange })} \r\n              min={-100}\r\n              max={100}\r\n              stepSize={1}\r\n              labelStepSize={20}\r\n              vertical\r\n            />\r\n          </th>\r\n          <th>\r\n            Avg Div Ratio\r\n            <PopupSlider\r\n              value={dividendRatioRange}\r\n              onChange={dividendRatioRange => onChange({ dividendRatioRange })} \r\n              min={0}\r\n              max={2}\r\n              stepSize={0.1}\r\n              labelStepSize={0.1}\r\n              vertical\r\n            />\r\n          </th>\r\n          <th>\r\n            Model fitt\r\n            <PopupSlider\r\n              value={fittRange}\r\n              onChange={fittRange => onChange({ fittRange })} \r\n              min={0}\r\n              max={1}\r\n              stepSize={0.1}\r\n              labelStepSize={0.2}\r\n              vertical\r\n            />\r\n          </th>\r\n          <th>Momentum 90</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {renderData.map((company, i) => \r\n          <tr key={i}>\r\n            <td>\r\n              <AnchorButton\r\n                href={company.get('borsdataLink')}\r\n                rightIcon=\"share\"\r\n                target=\"_blank\"\r\n                minimal\r\n              />\r\n              <AnchorButton\r\n                onClick={() => history.push(company.get('ShortName'))}\r\n                // onClick={handleClick}\r\n                // href={company.get('CountryShortName')}\r\n                rightIcon=\"grouped-bar-chart\"\r\n                target=\"_blank\"\r\n                minimal\r\n              >\r\n                {/* <Link to={company.get('CountryShortName')}>Home</Link> */}\r\n              </AnchorButton>\r\n              \r\n              {company.getIn(['Name'])}\r\n            </td>\r\n            <td>{(100*company.getIn(['estimate'])).toFixed(2) + '%'}</td>\r\n            <td>{(100*company.getIn(['yield'])).toFixed(1) + '%'}</td>\r\n            <td>{company.getIn(['pe']).toFixed(2)}</td>\r\n            <td>{(100*company.getIn(['avgDividendRatio'])).toFixed(1) + '%'}</td>\r\n            <td>{company.getIn(['fitt']).toFixed(2)}</td>\r\n            <td>{Math.round(100 * 365  * company.getIn(['stockPriceMomentum'])) + '%'}</td>\r\n          </tr>\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\n// function arePropsEqual(prevProps, nextProps) {\r\n//   return prevProps.companies.size === nextProps.companies.size; \r\n// }\r\n\r\nexport default immutableMemo(component)\r\n","import React, { memo } from 'react';\r\nimport { Button, Popover, RangeSlider, Checkbox, Navbar } from \"@blueprintjs/core\";\r\n\r\nfunction component(props) {\r\n  const { company, onHome } = props\r\n\r\n  return (\r\n    <Navbar>\r\n      <Navbar.Group align=\"left\">\r\n        <Button className=\"bp3-minimal\" icon=\"home\" onClick={() => onHome()} />\r\n        <Navbar.Heading>{company.get('Name')}</Navbar.Heading>\r\n        <Navbar.Divider />\r\n        <div>\r\n          Estimate: {(100 * company.get('estimate')).toFixed(1)}%/y\r\n        </div>\r\n        <Navbar.Divider />\r\n        <div>\r\n          Fitt: {(100 * company.get('fitt')).toFixed(1)}%\r\n        </div>\r\n      </Navbar.Group>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\n// function arePropsEqual(prevProps, nextProps) {\r\n//   return prevProps.companies.size === nextProps.companies.size; \r\n// }\r\n\r\nexport default memo(component)\r\n","import React from 'react'\r\nimport { fromJS } from 'immutable'\r\n// import { AppContext } from '../AppContext'\r\nimport NavbarInteractiveGraph from './NavbarInteractiveGraph'\r\n\r\n// https://codepen.io/nasrullahs/pen/QKYZdO\r\n\r\nconst paddingGroups = 40\r\nconst viewBoxWidth = 1200\r\nconst viewBoxHeigth = 1000\r\nconst barWidth = 8\r\n\r\nclass Sample extends React.Component {\r\n\r\n  // static contextType = AppContext\r\n\r\n  // constructor() {\r\n    // super();\r\n    // this.state = {\r\n      // historic: [[100, 8, -10], [10, 8, -10], [30, -100, 15]],\r\n      // projection: [[10, 18], [12, 10], [-10, 10], [10, 10*Math.random()]],\r\n\r\n      // estimateAdjusted: fromJS([40, 20, 100])\r\n    // };\r\n  // }\r\n\r\n  render() {\r\n    const { companies, match, projectionTime, estimationTime } = this.props\r\n    // const { historic, projection } = this.state\r\n\r\n    const company = companies\r\n      .find(company => company.get('ShortName') === match.params.id)\r\n      // .set('estimateAdjusted', this.state.estimateAdjusted)\r\n   \r\n    const estimateFunc = company.get('estimateFunc')\r\n\r\n    // console.log('props', this.props, match.params.id)\r\n    // console.log('state', this.state)\r\n    // console.log('companies', companies.toJS())\r\n    console.log('company', company.toJS())\r\n    // console.log('company.get(revenue)', company.get('revenue').toJS())\r\n\r\n    const historic = company.get('revenue')\r\n      .map((r, i) => fromJS([\r\n        {\r\n          value: r,\r\n          fill: r > 0 ? '#123456' : 'red',\r\n        }, {\r\n          value: -company.getIn(['netBrowing', i]),\r\n          fill: company.getIn(['netBrowing', i]) > 0 ? '#ff00ff' : 'green',\r\n        }, {\r\n          value: company.getIn(['freeCashFlow', i]),\r\n          fill: company.getIn(['freeCashFlow', i]) > 0 ? '#0eefcd' : 'red',\r\n        }, {\r\n          value: company.getIn(['earnings', i]),\r\n          fill: company.getIn(['earnings', i]) > 0 ? '#2d578b' : 'red',\r\n        }, {\r\n          value: company.getIn(['dividend', i]),\r\n          fill: company.getIn(['dividend', i]) > 0 ? '#035C43' : 'red',\r\n        }\r\n      ]))\r\n      .toJS()\r\n\r\n    const projection = new Array(projectionTime)\r\n      .fill(0)\r\n      .map((v, i) => isNaN(company.getIn(['estimateAdjusted', '' + i]))\r\n        ? { value: estimateFunc(i), fill: \"#035C43\" }\r\n        : { value: company.getIn(['estimateAdjusted', '' + i]), fill: \"#145C23\" }\r\n      )\r\n      .map((o, i) => [{\r\n        ...o,\r\n        onMouseDown: (e) => startDrag(e, i)\r\n      }])\r\n\r\n    const values = historic.concat(projection).flat().map(g => g.value)\r\n\r\n    const maxValue = Math.max(0, ...values)\r\n    const minValue = Math.min(0, ...values)\r\n\r\n    const yScaleFactor = viewBoxHeigth/(maxValue - minValue)\r\n    const zeroLevel = maxValue*yScaleFactor\r\n\r\n    const groups = historic.length + projection.length\r\n    const groupWidth = (viewBoxWidth - paddingGroups * groups) / groups\r\n\r\n    const transform = (n, v) => ({\r\n      x: paddingGroups*(n) + groupWidth*(n + 0.5),\r\n      y: zeroLevel - v*yScaleFactor,\r\n    })\r\n\r\n    const historicBars = historic\r\n      .concat(projection)\r\n      .map((group, groupIndex) =>\r\n        group.map((bar, barIndex) => ({\r\n        x: paddingGroups*(groupIndex) + groupWidth*(groupIndex + barIndex/group.length),\r\n        y: bar.value > 0 ? zeroLevel - bar.value*yScaleFactor : zeroLevel,\r\n        width: barWidth,\r\n        height: Math.abs(bar.value)*yScaleFactor,\r\n        fill: bar.fill,\r\n        onMouseDown: bar.onMouseDown,\r\n      })))\r\n      .flat()  \r\n\r\n    const startLineN = historic.length - estimationTime\r\n    const stopLineN = historic.length + projectionTime\r\n\r\n    const startLine = transform(startLineN, estimateFunc(-estimationTime))\r\n    const stopLine = transform(stopLineN, estimateFunc(projectionTime))\r\n\r\n    const startDrag = (event, index) => {\r\n      event.preventDefault();\r\n  \r\n      const mouseup = (event) => {\r\n        let cursorPoint = this.svg.createSVGPoint();\r\n        cursorPoint.x = event.clientX;\r\n        cursorPoint.y = event.clientY;\r\n        cursorPoint = cursorPoint.matrixTransform(this.svg.getScreenCTM().inverse());\r\n        const y = cursorPoint.y\r\n        const value = (zeroLevel - y) / yScaleFactor\r\n\r\n        this.props.setEstimateAdjusted(company.get('ShortName'), '' + index, value)\r\n        \r\n        document.removeEventListener(\"mouseup\", mouseup);\r\n      };\r\n  \r\n      document.addEventListener(\"mouseup\", mouseup);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <NavbarInteractiveGraph company={company} onHome={() => this.props.history.goBack()} />\r\n        <div style={{ margin: 20}}>\r\n          <svg width=\"90vw\" height=\"100%\" viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeigth}`} ref={(svg) => this.svg = svg}>\r\n            {historicBars.map((bar, i) => \r\n              <rect {...bar} key={i}\r\n              ></rect>\r\n            )}\r\n            <line\r\n              x1={startLine.x} y1={startLine.y}\r\n              x2={stopLine.x} y2={stopLine.y}\r\n              fill=\"transparent\"\r\n              stroke=\"gray\"\r\n              strokeWidth=\"4\"\r\n              strokeDasharray=\"5,5\"\r\n              key=\"line\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Sample;\r\n","/**\r\n * @param {} values -\r\n *\r\n * http://mathworld.wolfram.com/LeastSquaresFitting.html\r\n */\r\nexport function leastSquarceEstimate(values) {\r\n  // values = removeOutliers(values);\r\n  const N = values.length;\r\n\r\n  var mt = values.reduce((sum, item, n) => sum + n, 0) / N;\r\n  var mx = values.reduce((sum, item, n) => sum + item, 0) / N;\r\n\r\n  var sstt = values.reduce((sum, item, n) => sum + (n - mt) * (n - mt), 0);\r\n  var ssxx = values.reduce((sum, item, n) => sum + (item - mx) * (item - mx), 0);\r\n  var sstx = values.reduce((cov, item, n) => cov + n * item, 0) - N * mt * mx;\r\n\r\n  var slope = sstx / sstt;\r\n  // var variance = (ssxx - slope * sstx) / (N - 2);\r\n\r\n  // if(N < 4) {\r\n  //   return [mx, 0, Math.sqrt(variance)];\r\n  // }\r\n\r\n  // return [mx - slope*mt + (N-1)*slope, slope, Math.sqrt(ssxx), sstx * sstx / sstt / ssxx];\r\n  return {\r\n    biasStart: mx,\r\n    biasEnd: mx - slope*mt + (N-1)*slope,\r\n    slope,\r\n    std: Math.sqrt(ssxx),\r\n    fitt: sstx * sstx / sstt / ssxx,\r\n  }\r\n}\r\n\r\nexport function earningsEstimate(earningsLs, netBrowing, projectionTime, intrest=0) {\r\n  const { biasEnd, slope } = earningsLs;\r\n\r\n  // return (biasEnd + projectionTime*slope/2 - Math.max(netBrowing, 0)*intrest);\r\n  // return new Array(projectionTime).fill(0).map((v, i) => biasEnd + slope*i)\r\n\r\n  return (time) => biasEnd + slope*(time + 1)\r\n}\r\n\r\nexport function dividendEstimate(company, projectionTime, intrest, type, estimationTime) {\r\n  // const companyJs = company.toJS();\r\n  // const { avgDividendRatio, netBrowing, earnings } = companyJs;\r\n  \r\n  // console.log('companyJs', companyJs)\r\n\r\n  let estimationSeries\r\n  if(type === 'combo') {\r\n    estimationSeries = company.get('earnings')\r\n      .map((e, i) => (e + company.getIn(['freeCashFlow', i]) / 2))\r\n  } else {\r\n    estimationSeries = company.get(type)\r\n  }\r\n  // console.log('estimationSeries', estimationSeries)\r\n\r\n  if(estimationSeries === undefined || estimationSeries.length < estimationTime) {\r\n    return NaN\r\n  }\r\n\r\n  const estSeriesSlice = estimationSeries.slice(-estimationTime)\r\n  \r\n  const estSlice = estSeriesSlice\r\n    .reduce((s, v, i, a) => s + v)\r\n  const dividendSlice = company\r\n    .get('dividend')\r\n    .slice(-estimationTime)\r\n    .reduce((s, v, i, a) => s + v)\r\n\r\n  const dividendRatio = dividendSlice / estSlice\r\n // const dividendRatio = 1 // Math.min(avgDividendRatio, 0.8);\r\n\r\n  const typeLs = leastSquarceEstimate(estSeriesSlice.toJS())\r\n  const earningsEstimateFunc = earningsEstimate(typeLs, company.get('netBrowing'), projectionTime, intrest)\r\n  \r\n  const estimateFunc = (t) => Math.max(0, Math.min(0.8, dividendRatio))*earningsEstimateFunc(t)\r\n\r\n  return {\r\n    fitt: typeLs.fitt,\r\n    estimateFunc,\r\n    dividendRatio,\r\n  }\r\n}\r\n\r\nexport function yearsToPayOff(company) {\r\n  const { earningsLs, avgDividendRatio, price } = company.toJS();\r\n  const dividendRatio = Math.min(avgDividendRatio, 0.8);\r\n\r\n  const [bias, slop] = earningsLs;\r\n  return price / dividendRatio / (bias + slop/2);\r\n}\r\n\r\nexport function getProjection(company, projectionTime, type = 'earningCashFlowMergeLs') {\r\n  const companyJs = company.toJS();\r\n  const { avgDividendRatio } = companyJs;\r\n  const dividendRatio = Math.min(avgDividendRatio, 0.8);\r\n\r\n  const [bias, slop] = companyJs[type];\r\n  return Array.from(Array(projectionTime), (e,i) => ({\r\n    year: 'Not Set',\r\n    revenue: 0,\r\n    freeCashFlow: 0,\r\n    earnings: bias + (i+1)*slop,\r\n    dividend: dividendRatio * (bias + (i+1)*slop)\r\n  }));\r\n}\r\n","import React from 'react'\r\nimport { Route } from 'react-router'\r\nimport axios from 'axios'\r\nimport { fromJS, Map } from 'immutable'\r\nimport { Slider, Checkbox, Button, Popover, Navbar } from \"@blueprintjs/core\";\r\n\r\nimport StockTable from \"./Components/StockTable\"\r\nimport GraphInteractive from './Components/GraphInteractive'\r\nimport { dividendEstimate, leastSquarceEstimate } from './Services/statistics'\r\n\r\n// TODO https://reacttraining.com/react-router/web/guides/scroll-restoration\r\n\r\nclass Routes extends React.Component {\r\n\r\n  constructor() {\r\n    super()\r\n\r\n    const localStorageFilterSettings = localStorage.getItem('filterSettings')\r\n    const localStorageCompaniesInternal = localStorage.getItem('companiesInternal')\r\n\r\n    this.state = {\r\n      selected: 'avanza',\r\n      estimateType: 'earnings',\r\n      revenueGrowth: true,\r\n      earningsGrowth: true,\r\n      netBrowingDecline: true,\r\n\r\n      fittRange: [0, 1],\r\n      dividendRatioRange: [0, 1],\r\n      peRange: [0, 100],\r\n      yieldRange: [0, 0.2],\r\n      projectionTime: 5,\r\n      estimationTime: 4,\r\n\r\n      ...JSON.parse(localStorageFilterSettings),\r\n\r\n      companiesExternal: Map(),\r\n      companiesInternal: localStorageCompaniesInternal\r\n        ? fromJS(JSON.parse(localStorageCompaniesInternal))\r\n        : Map(),\r\n      companiesSheets: Map()\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    const getEarnings$ = axios.get('https://bofa.github.io/stocks/earnings.json')\r\n    // axios.get('/earnings.json')\r\n      .then(response => fromJS(response.data\r\n          .reduce((acc, cur, i) => {\r\n            acc[cur.ShortName] = cur;\r\n            return acc;\r\n          }, {})))\r\n\r\n    getEarnings$.then(companies => this.setState({ companiesExternal: companies }))\r\n\r\n    const getAmazingSheets$ = axios.get('https://spreadsheets.google.com/feeds/list/183-e_Hf_ZLD4D-91TtqpI35C6TQO_HanD-NKg-XjvAY/od6/public/values?alt=json')\r\n      .then(response => response.data.feed.entry\r\n        .map(row => [row['gsx$keyborsdata']['$t'], row['gsx$price']['$t']])\r\n        .filter(row => row[0].length > 0))\r\n\r\n    Promise.all([getEarnings$, getAmazingSheets$])\r\n      .then(([companies, sheets]) => sheets\r\n        .map(([sheetUrlName, sheetsPrice]) => [\r\n          companies.find(company => company.get('CountryUrlName') === sheetUrlName),\r\n          sheetsPrice,\r\n        ])\r\n        .filter(d => d[0])\r\n        .map(([company, sheetsPrice]) => [company.get('ShortName'), { price: sheetsPrice }])\r\n      )\r\n      .then(d => new Map(d))\r\n      .then(companiesSheets => this.setState({ companiesSheets }))\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      projectionTime,\r\n      estimationTime,\r\n      companiesExternal,\r\n      companiesInternal,\r\n      companiesSheets,\r\n      estimateType,\r\n      revenueGrowth,\r\n      earningsGrowth,\r\n      netBrowingDecline,\r\n      fittRange,\r\n      dividendRatioRange,\r\n      peRange,\r\n      yieldRange,\r\n    } = this.state\r\n\r\n    if(companiesExternal.size < 1) {\r\n      return null\r\n    }\r\n\r\n    // console.log('state', this.state)\r\n\r\n    const mergedCompanies = companiesExternal\r\n      // .filter(company => company.has('earnings') && company.get('earnings').size >= estimationTime )\r\n      // .filter(company => company.getIn([estimateType]) && company.getIn([estimateType]).size >= projectionTime)\r\n      .mergeDeep(companiesInternal)\r\n      .mergeDeep(companiesSheets)\r\n      .map(company => {\r\n        // const leverageType = ''\r\n        // const [leverage, cost, type] = parseMargin(leverageType, company);\r\n        \r\n        const { fitt, estimateFunc, dividendRatio } = dividendEstimate(company, projectionTime, 0, estimateType, estimationTime)\r\n\r\n        // const dividendEstimateVector = new Array(projectionTime).fill(0).map((v, i) => dividendRatio*earningsEstimateFunc(i))\r\n        // estimate: dividendEstimateVector.reduce((s, v) => s+v) / projectionTime,\r\n\r\n        const estimate = new Array(projectionTime)\r\n          .fill(0)\r\n          .map((v, i) => company.getIn(['estimateAdjusted', '' + i]) || estimateFunc(i))\r\n          .reduce((s, v) => s+v)\r\n          / projectionTime\r\n\r\n        const revenueLs  = leastSquarceEstimate(company.get('revenue').slice(-estimationTime).toJS())\r\n        const earningsLs = leastSquarceEstimate(company.get('earnings').slice(-estimationTime).toJS())\r\n        const netBrowingLs = leastSquarceEstimate(company.get('netBrowing').slice(-estimationTime).toJS())\r\n\r\n        return company\r\n          .set('estimate', estimate / company.get('price') / company.getIn(['numberOfStocks', -1]))\r\n          .set('estimateFunc', estimateFunc)\r\n          .set('fitt', fitt)\r\n          .set('revenueLs', fromJS(revenueLs))\r\n          .set('earningsLs', fromJS(earningsLs))\r\n          .set('netBrowingLs', fromJS(netBrowingLs))\r\n          .set('avgDividendRatio', dividendRatio)\r\n          // .set('estimate', dividendEstimate(company, projectionTime, 0) / company.get('price') / company.getIn(['numberOfStocks', -1]), 0)\r\n          // .set('earningsEstimate', leverage*earningsEstimate(company, projectionTime) - cost)\r\n          // .set('earningsEstimate', earningsEstimate(company, projectionTime))\r\n          .set('yield', company.getIn(['dividend', -1]) / company.getIn(['price']) / company.getIn(['numberOfStocks', -1]))\r\n          .set('pe', company.getIn(['price']) * company.getIn(['numberOfStocks', -1]) / company.getIn(['earnings', -1]))\r\n          .set('borsdataLink', `https://borsdata.se/${company.get('CountryUrlName')}/nyckeltal`)\r\n      }).toList();\r\n\r\n    const filteredCompanies = mergedCompanies\r\n      .filter(company => company.has('earnings') && company.get('earnings').size >= estimationTime )\r\n      .filter(company => !revenueGrowth || company.getIn(['revenueLs', 'slope']) > 0)\r\n      .filter(company => !earningsGrowth || company.getIn(['earningsLs', 'slope']) > 0)\r\n      .filter(company => !netBrowingDecline || company.getIn(['netBrowingLs', 'slope']) < 0)\r\n      .filter(company => company.get('fitt') >= fittRange[0] && company.get('fitt') <= fittRange[1])\r\n      .filter(company => company.get('pe') >= peRange[0] && company.get('pe') <= peRange[1])\r\n      .filter(company => company.get('yield') >= yieldRange[0] && company.get('yield') <= yieldRange[1])\r\n      .filter(company => company.get('avgDividendRatio') >= dividendRatioRange[0] && company.get('avgDividendRatio') <= dividendRatioRange[1])\r\n\r\n    // console.log('mergedCompanies', mergedCompanies.toJS())\r\n\r\n    const filterSettings = {\r\n      projectionTime, estimationTime, estimateType, revenueGrowth,\r\n      earningsGrowth, fittRange, dividendRatioRange, peRange,\r\n      yieldRange, netBrowingDecline\r\n    }\r\n\r\n    localStorage.setItem('filterSettings', JSON.stringify(filterSettings))\r\n    localStorage.setItem('companiesInternal', JSON.stringify(companiesInternal))\r\n\r\n    return [\r\n      <Navbar>\r\n        <Navbar.Group align=\"left\">\r\n            <Navbar.Heading>Stock Prediction</Navbar.Heading>\r\n            <Navbar.Divider />\r\n            <select value={estimateType} onChange={event => this.setState({ estimateType: event.currentTarget.value })}>\r\n              <option value=\"earnings\">Earnings</option>\r\n              <option value=\"revenue\">Revenue</option>\r\n              <option value=\"freeCashFlow\">Free Cash Flow</option>\r\n              <option value=\"combo\">Combo</option>\r\n            </select>\r\n\r\n            <Checkbox checked={revenueGrowth} inline label=\"Revenue Growth\" onChange={e => this.setState({ revenueGrowth: e.target.checked })} />\r\n            <Checkbox checked={earningsGrowth} inline label=\"Earnings Growth\" onChange={e => this.setState({ earningsGrowth: e.target.checked })} />\r\n            <Checkbox checked={netBrowingDecline} inline label=\"Net Borow Decline\" onChange={e => this.setState({ netBrowingDecline: e.target.checked })} />\r\n\r\n            <Popover content={\r\n              <div width={200} style={{ padding: 10 }}>\r\n                <Slider\r\n                  value={estimationTime}\r\n                  onChange={estimationTime => this.setState({ estimationTime })} \r\n                  min={2}\r\n                  max={10}\r\n                  stepSize={1}\r\n                  labelStepSize={2}\r\n                  vertical\r\n                  />\r\n              </div>}\r\n            >\r\n              <Button icon=\"filter\" minimal >\r\n                {estimationTime} Est Time\r\n              </Button>\r\n            </Popover>\r\n\r\n            <Popover content={\r\n              <div width={200} style={{ padding: 10 }}>\r\n                <Slider\r\n                  value={projectionTime}\r\n                  onChange={projectionTime => this.setState({ projectionTime })} \r\n                  min={2}\r\n                  max={10}\r\n                  stepSize={1}\r\n                  labelStepSize={2}\r\n                  vertical\r\n                  />\r\n              </div>}\r\n            >\r\n              <Button icon=\"filter\" minimal>\r\n                {projectionTime} Proj Time\r\n              </Button>\r\n            </Popover>\r\n\r\n        </Navbar.Group>\r\n      </Navbar>,\r\n\r\n      <Route key=\"routeTable\" path=\"/\" exact render={props => <StockTable key=\"table\" {...props} companies={filteredCompanies} {...filterSettings} onChange={param => this.setState(param)} />} />,\r\n      <Route key=\"routeGraph\" path=\"/:id\" exact render={props =>\r\n        <GraphInteractive key=\"graph\" {...props}\r\n          estimationTime={estimationTime}\r\n          projectionTime={projectionTime}\r\n          companies={mergedCompanies}\r\n          setEstimateAdjusted={(shortName, index, value) => this.setState({\r\n            companiesInternal: this.state.companiesInternal.setIn([shortName, 'estimateAdjusted', index], value)\r\n          })}\r\n        />}\r\n      />\r\n    ]\r\n  }\r\n}\r\n\r\nexport default Routes","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport \"normalize.css\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport \"@blueprintjs/table/lib/css/table.css\";\r\n\r\nimport './index.css';\r\nimport Routes from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\nReactDOM.render(<HashRouter><Routes /></HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}